import{eN as n,qs as t}from"./index-oU7MR3OG.js";class r{constructor(){this.supportCascades=!0}loadCubeData(o,i,m,e){const s=i.getEngine();let a,l=!1,d=1e3;if(Array.isArray(o))for(let p=0;p<o.length;p++){const h=o[p];a=n.GetDDSInfo(h),i.width=a.width,i.height=a.height,l=(a.isRGB||a.isLuminance||a.mipmapCount>1)&&i.generateMipMaps,s._unpackFlipY(a.isCompressed),n.UploadDDSLevels(s,i,h,a,l,6,-1,p),!a.isFourCC&&a.mipmapCount===1?s.generateMipMapsForCubemap(i):d=a.mipmapCount-1}else{const p=o;a=n.GetDDSInfo(p),i.width=a.width,i.height=a.height,m&&(a.sphericalPolynomial=new t),l=(a.isRGB||a.isLuminance||a.mipmapCount>1)&&i.generateMipMaps,s._unpackFlipY(a.isCompressed),n.UploadDDSLevels(s,i,p,a,l,6),!a.isFourCC&&a.mipmapCount===1?s.generateMipMapsForCubemap(i,!1):d=a.mipmapCount-1}s._setCubeMapTextureParams(i,l,d),i.isReady=!0,i.onLoadedObservable.notifyObservers(i),i.onLoadedObservable.clear(),e&&e({isDDS:!0,width:i.width,info:a,data:o,texture:i})}loadData(o,i,m){const e=n.GetDDSInfo(o),s=(e.isRGB||e.isLuminance||e.mipmapCount>1)&&i.generateMipMaps&&Math.max(e.width,e.height)>>e.mipmapCount-1===1;m(e.width,e.height,s,e.isFourCC,()=>{n.UploadDDSLevels(i.getEngine(),i,o,e,s,1)})}}export{r as _DDSTextureLoader};
